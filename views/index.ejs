<head>
    <script src="../cytoscape.min.js"></script>
    <script src="https://unpkg.com/layout-base/layout-base.js"></script>
    <script src="https://unpkg.com/cose-base/cose-base.js"></script>
    <script src="https://unpkg.com/cytoscape-fcose/cytoscape-fcose.js"></script>
    <script src="../cytoscape-context-menus.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="../cytoscape-layout-utilities.js"></script>
    <script src="../cytoscape-view-utilities.js"></script>
    <link rel="stylesheet" type="text/css" href="../index.css">
</head>

<body>
    <form id="actorForm" label="Actor Form" action="/actor/depth" method="post">
        <input type="text" name="actor" placeholder="Actor Name">
        <input type="text" name="depth" placeholder="Depth">
        <input type="submit" value="Submit">
    </form>

    <!-- Time Travel Slider -->
    <div id="timeTravelSliderContainer">
        <label for="timeTravelSlider">Select a Year: <span id="sliderYearDisplay">2024</span></label>
        <br>
        <input type="range" id="timeTravelSlider" min="1900" max="2024" value="2024" step="1">
        <br>
        <button id="resetGraph">Reset Graph</button>
    </div>

    <div id="properties" style="position: absolute; top: 300px; left: 20px; width: 300px; height: 600px; border: 1px solid black; padding: 10px; background: white;">
        <h3>Properties</h3>
        <div id="properties-content">Click on a node to see its properties.</div>
      </div>
      
    <div id="cy"></div>

    <script type="module">        
        var layoutOptions = {
            name: 'fcose',
            animate: true,
            fit: true,
            padding: 50,
            nodeSeparation: 100,
        };
        var newDataLayoutOptions = {
            name: 'fcose',
            animate: true,
            fit: true,
            padding: 50,
            nodeSeparation: 100,
            randomize: false,
        };
        //TO-DO: context menus extension
        //layout utilities: to define initial positions
        //view utilities: to highlight nodes and imidiate neighbors


        var cy = cytoscape(
            {
                container: document.getElementById("cy"),
                selectionType: 'additive',
                boxSelectionEnabled: true,
                style: [
                    {
                        selector: 'node[type = "Movie"]',
                        css: {
                            'label': 'data(properties.title)',
                            'height': '50px',
                            'width': '50px',
                            'background-image': 'url(../Film.png)',
                            'background-fit': 'cover',
                            'text-opacity': 0.8,

                        }
                    },

                    {
                        selector: 'node[type = "Person"]',
                        css: {
                            'label': 'data(properties.name)',
                            'background-image': 'url(../Person-1.png)',
                            'background-fit': 'cover',
                            'text-opacity': 0.8,

                        }
                    },

                    {
                        selector: "edge[label]",
                        css: {
                            "label": "data(type)",
                            "text-rotation": "autorotate",
                            'text-opacity': 0.8,
                            'font-size': '10px',
                            'font-weight': 'bold',
                            'line-color': '#FDDA0D',
                            'width': '3px',
                            'curve-style': 'bezier',
                            'control-point-step-size': 20,
                            // Ensure the arrow is visible
                            'target-arrow-shape': 'triangle',
                            'target-arrow-color': '#FDDA0D',
                        }
                    },

                ],
            }
        );

        
        var layoutApi = cy.layoutUtilities();

        var viewApi = cy.viewUtilities();




        cy.contextMenus({
        menuItems: [
            {
            id: 'showMoviesOfPerson',
            content: 'Show movies of person',
            tooltipText: 'show movies of person',
            selector: 'node[type="Person"]',
            onClickFunction: function (event) {
                var target = event.target || event.cyTarget;
                fetchMovies(target._private.data.id);
            }
            },
            {
            id: 'showActorsOfMovie',
            content: 'Show actors of movie',
            tooltipText: 'Show actors of movie',
            selector: 'node[type="Movie"]',
            onClickFunction: function (event) {
                var target = event.target || event.cyTarget;
                fetchActors(target._private.data.id);
            }
            }
        ]
        });

        //Display properties on tap
        cy.on('tap', 'node', function(evt){
            var node = evt.target;
            var propertiesHtml = '';

            //'properties' is an object with key-value pairs
            var properties = node.data('properties');
            
            for (var prop in properties) {
                //born and released properties are year objects
                if (prop === 'born' || prop === 'released') {
                    propertiesHtml += '<b>' + prop + '</b>: ' + properties[prop].low + '<br>';
                }
                else{
                    propertiesHtml += '<b>' + prop + '</b>: ' + properties[prop] + '<br>';
                }
            }

            // Insert the properties into the properties-content div
            document.getElementById('properties-content').innerHTML = propertiesHtml;
        });        


        function fetchMovies(actorId) {
            //create a post request to addActorMovies
            //update the graph with the received data
            $.ajax({
                type: "POST",
                url: "/addActorMovies",
                data: { actorId: actorId },
                success: function (newData) {
                    addNewData(newData)
                }
            });
        }

        function fetchActors(movieId) {
            //create a post request to addMovieActors
            //update the graph with the received data
            $.ajax({
                type: "POST",
                url: "/addMovieActors",
                data: { movieId: movieId },
                success: function (newData) {
                    addNewData(newData)
                }
            });
        }

        function addNewData(dataArr) {
            cy.add(dataArr);
            cy.layout(newDataLayoutOptions).run();
        }

        //Event listener for slider
        document.addEventListener('DOMContentLoaded', function () {
            var slider = document.getElementById('timeTravelSlider');
            var yearDisplay = document.getElementById('sliderYearDisplay');
            
            slider.addEventListener('input', function (e) {
                yearDisplay.textContent = e.target.value; // Update the display
                filterGraphByYear(e.target.value);        // Filter the graph
            });
        });

        // Event listener for reset button
        document.getElementById('resetGraph').addEventListener('click', function() {
            //make the hidden nodes visible
            viewApi.show(cy.nodes('.hidden'));
            //remove hidden class from the nodes
            cy.elements().removeClass('hidden');

            //reset slider
            document.getElementById('timeTravelSlider').value = 2024;
            document.getElementById('sliderYearDisplay').textContent = 2024;
            //display the graph
            cy.layout(layoutOptions).run();
        });

        function filterGraphByYear(year) {
            // Hide all nodes and edges initially
            cy.elements().addClass('hidden');

            // Select and show nodes based on the 'born' or 'released' property
            cy.nodes().forEach(function(node) {
                var birthYear = node.data('properties').born?.low;
                var releaseYear = node.data('properties').released?.low;

                // Check if the node's year is less than or equal to the selected year
                if ((birthYear && birthYear <= year) || (releaseYear && releaseYear <= year)) {
                    node.removeClass('hidden');
                    // Show the connected edges of the revealed nodes
                    node.connectedEdges().removeClass('hidden');
                }
            });

            //hide the nodes with view utilities
            viewApi.hide(cy.nodes('.hidden'));

            //display the graph
            cy.layout(layoutOptions).run();
        }   

        // Pass data from server to client and add to cytoscape
        function addDataToCytoscape(dataArr) {
            //remove all earlier nodes
            cy.remove('node')

            //add new nodes
            var newNodesAll = cy.collection(dataArr);
            layoutApi.placeNewNodes(newNodesAll);            

            //display
            cy.layout(layoutOptions).run();
        }

        // Event listener for form submission
        // Prevent the default form action
        document.addEventListener('DOMContentLoaded', function () {
            var form = document.getElementById('actorForm');
            if (form) {
                form.onsubmit = function (e) {
                    e.preventDefault();
                    var actor = document.querySelector('[name="actor"]').value;
                    var depth = document.querySelector('[name="depth"]').value;

                    var formData = { actor: actor, depth: depth };

                    // Make an AJAX call to the server
                    $.ajax({
                        type: "POST",
                        url: "/actor/depth",
                        data: formData,
                        success: function (dataArr) {
                            //add data and layout to cytoscape
                            addDataToCytoscape(dataArr)

                            //reset slider
                            document.getElementById('timeTravelSlider').value = 2024;
                            document.getElementById('sliderYearDisplay').textContent = 2024;
                        }
                    });
                };
            }
        });
    </script>
</body>